input {
  http {
    id => "test_minerva"
    port => 9190
    response_headers => {
          "Access-Control-Allow-Origin" => "*"
          "Content-Type" => "text/plain"
          "Access-Control-Allow-Headers" => "Origin, X-Requested-With, Content-Type, Accept"
    }
  }
}

filter {
  json {
    source => "event.original"
    target => "event_data"
  }

  mutate {
    remove_field => [ "event_data", "event.original", "event" ] # Remove the entire event_data, event.original and event fields
    rename => { "[position][identifier]" => "identifier" } # Rename the nested field identifier
    rename => { "[position][position]" => "position" } # Rename the nested field position
    rename => { "[position][parameter]" => "parameter" } # Rename the nested field parameter
    rename => { "[position][timestamp]" => "timestamp" } # Rename the nested field timestamp
    split => { "value" => "," }
    split => { "prev_pos" => "," }
    add_field => { "[longitude]" => "%{[value][0]}" } # Create a field for longitude
    add_field => { "[altitude]" => "%{[value][1]}" } # Create a field for altitude
    add_field => { "[latitude]" => "%{[value][2]}" } # Create a field for latitude

    add_field => { "[prev_long]" => "%{[prev_pos][0]}" } # Create a field for altitude
    add_field => { "[prev_lat]" => "%{[prev_pos][2]}" } # Create a field for latitude

    convert => { "[longitude]" => "float" }
    convert => { "[altitude]" => "float" }
    convert => { "[latitude]" => "float" }

    convert => { "[prev_long]" => "float" }
    convert => { "[prev_lat]" => "float" }
    remove_field => [ "value" ] # Remove the entire value field
    remove_field => [ "prev_pos" ] # Remove the entire value field
  }

  mutate {
    rename => { "[longitude]" => "[location][lon]" }
    rename => { "[latitude]" => "[location][lat]" }

    rename => { "[prev_long]" => "[source][lon]" }
    rename => { "[prev_lat]" => "[source][lat]" }


  }

  ruby {
  code => '
    x = event.get("[location][lon]").to_f  # Convert x to a float
    z = event.get("[location][lat]").to_f   # Convert z to a float
    # Map x from (-10, 10) to (-30, 30)
    mapped_longitude = -x * 3
    # Map z from (-10, 10) to (30, -30)
    mapped_latitude = z * 3
    event.set("[location][lon]", mapped_longitude)
    event.set("[location][lat]", mapped_latitude)

    prev_x = event.get("[source][lon]").to_f  # Convert x to a float
    prev_z = event.get("[source][lat]").to_f   # Convert z to a float
    # Map x from (-10, 10) to (-30, 30)
    mapped_prev_longitude = -prev_x * 3
    # Map z from (-10, 10) to (30, -30)
    mapped_prev_latitude = prev_z * 3
    event.set("[source][lon]", mapped_prev_longitude.to_f)
    event.set("[source][lat]", mapped_prev_latitude.to_f)
  '
  }

  mutate{
    add_field => { "[destination][lon]" => "%{[location][lon]}" }
    add_field => { "[destination][lat]" => "%{[location][lat]}" }
    #convert source and destination to geo_point
    convert => { "[source][lon]" => "float" }
    convert => { "[source][lat]" => "float" }
    remove_field => [ "user_agent" ] # Remove the entire value field
    remove_field => [ "timestamp" ] # Remove the entire value field
    remove_field => [ "host" ] # Remove the entire value field
    remove_field => [ "url" ] # Remove the entire value field
    remove_field => [ "http" ] # Remove the entire value field
    remove_field => [ "@version" ] # Remove the entire value field
  }
  
  date {
    match => [ "timestamp", "ISO8601" ] # Use the renamed timestamp field
    target => "@timestamp"
  }
}

output {
  # elasticsearch {
  #  hosts => ["elasticsearch:9200"]
  #  index => "logs-%{+YYYY.MM.dd}"
  # }

  kafka { 
    codec => json
    bootstrap_servers => "kafkaserver:9092" 
    topic_id => "positions" 
  }

  stdout {
    #print only the source[lon][lat] and destination[lon][lat] data separeted by a comma
    codec => line { format => "%{[source][lon]},%{[source][lat]},%{[destination][lon]},%{[destination][lat]}" } 
  }
}