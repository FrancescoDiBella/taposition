docker run --hostname=25c3fc8b5415 --env=CORS_ENABLED=true --env=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin --env=TOMCAT_VERSION=9.0.86 --env=CATALINA_HOME=/opt/apache-tomcat-9.0.86  --env=CORS_ALLOWED_ORIGINS=* --env=CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,HEAD,OPTIONS --env=CORS_ALLOWED_HEADERS=* --env=CORS_ALLOW_CREDENTIALS=false --env=DEBIAN_FRONTEND=noninteractive --env=GEOSERVER_VERSION=2.25.0 --env=GEOSERVER_BUILD=80 --env=GEOSERVER_DATA_DIR=/opt/geoserver_data/ --env=GEOSERVER_REQUIRE_FILE=/opt/geoserver_data//global.xml --env=GEOSERVER_LIB_DIR=/opt/apache-tomcat-9.0.86/webapps/geoserver/WEB-INF/lib/ --env=INSTALL_EXTENSIONS=false --env=WAR_ZIP_URL= --env=STABLE_EXTENSIONS= --env=STABLE_PLUGIN_URL=https://downloads.sourceforge.net/project/geoserver/GeoServer/2.25.0/extensions --env=COMMUNITY_EXTENSIONS= --env=COMMUNITY_PLUGIN_URL= --env=ADDITIONAL_LIBS_DIR=/opt/additional_libs/ --env=ADDITIONAL_FONTS_DIR=/opt/additional_fonts/ --env=SKIP_DEMO_DATA=false --env=ROOT_WEBAPP_REDIRECT=false --env=POSTGRES_JNDI_ENABLED=false --env=CONFIG_DIR=/opt/config --env=CONFIG_OVERRIDES_DIR=/opt/config_overrides --env=HEALTHCHECK_URL=http://localhost:8080/geoserver/web/wicket/resource/org.geoserver.web.GeoServerBasePage/img/logo.png --network=tap_tesi --workdir=/opt -p 8080:8080 --restart=no --label='org.opencontainers.image.ref.name=ubuntu' --label='org.opencontainers.image.version=22.04' --runtime=runc -t -d docker.osgeo.org/geoserver:2.25.0




curl -X PUT "localhost:9200/logs_position/_mapping?pretty" -H 'Content-Type: application/json' -d'
{
  "properties": {
    "location": {
      "type": "geo_point"
    },
    "source": {
      "type": "geo_point"
    },
    "destination": {
      "type": "geo_point"
    },
   "predicted_location": {
      "type": "geo_point"
    },
    "timestamp":{
      "type": "date"
    },
   "identifier": {
      "type": "keyword"
    }
  }
}
'

curl -X PUT "localhost:9200/logs_position/"

curl -X GET "http://elasticsearch:9200/_cat/indices?v"

import pandas as pd

# Load the CSV file
file_path = '/mnt/data/data.csv'
data = pd.read_csv(file_path)

# Display the first few rows of the dataframe to understand its structure
data.head()


import matplotlib.pyplot as plt

# Plot the path
plt.figure(figsize=(10, 10))

# Extracting coordinates
latitudes = data['lat'].tolist() + [data['next_lat'].iloc[-1]]
longitudes = data['lon'].tolist() + [data['next_lon'].iloc[-1]]

# Plotting the path
plt.plot(longitudes, latitudes, marker='o', linestyle='-', color='b')

# Adding labels and title
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.title('Player Movement Path')

# Display the plot
plt.grid(True)
plt.show()



import numpy as np

# Define the size of the grid/map
grid_size = 50  # 50x50 grid

# Create an empty grid
game_map = np.zeros((grid_size, grid_size))

# Normalize coordinates to fit within the grid size
def normalize_coordinate(value, min_val, max_val, grid_size):
    return int((value - min_val) / (max_val - min_val) * (grid_size - 1))

# Extract min and max values for normalization
min_lat, max_lat = data['lat'].min(), data['lat'].max()
min_lon, max_lon = data['lon'].min(), data['lon'].max()

# Function to add path to the map
def add_path_to_map(map_grid, latitudes, longitudes, min_lat, max_lat, min_lon, max_lon, grid_size):
    for lat, lon in zip(latitudes, longitudes):
        x = normalize_coordinate(lat, min_lat, max_lat, grid_size)
        y = normalize_coordinate(lon, min_lon, max_lon, grid_size)
        map_grid[x, y] = 1  # Mark the path with 1

# Mark the player's path on the game map
add_path_to_map(game_map, latitudes, longitudes, min_lat, max_lat, min_lon, max_lon, grid_size)

# Add some obstacles (randomly for demonstration)
np.random.seed(0)  # For reproducibility
obstacles = np.random.choice(range(grid_size**2), size=100, replace=False)
for obstacle in obstacles:
    x, y = divmod(obstacle, grid_size)
    if game_map[x, y] == 0:  # Ensure not to overwrite the path
        game_map[x, y] = 2  # Mark obstacles with 2

# Plotting the game map
plt.figure(figsize=(10, 10))
plt.imshow(game_map, cmap='viridis', origin='lower')

# Adding labels and title
plt.title('Video Game Map')
plt.xlabel('Longitude')
plt.ylabel('Latitude')

# Display the plot
plt.grid(False)
plt.colorbar(label='0: Empty, 1: Path, 2: Obstacle')
plt.show()
